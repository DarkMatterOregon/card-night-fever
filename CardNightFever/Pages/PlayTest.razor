@page "/GhettoPlayTest"
@using CardNightFever.Data;
@using CardNightFever.Shared;
@using Blazor.DragDrop.Core;

<h3>PlayTest</h3>

@if (_deck == null || players[0] == null || players[1] == null || _pile == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4>The deck</h4>
    @if (!_deck.IsEmpty)
    {
        <Dropzone Name="Deck" Class="row">
            @foreach (var card in _deck.Cards)
            {
                int identity = 0;
                <Draggable Name="@identity.ToString()">
                    <Card PlayingCard="@card" />
                </Draggable>
            }
        </Dropzone>
    }
    else
    {
        <button onclick="@CreateDeck(_deck)">Create Deck</button>
    }
    int playerNum = 1;
    string playerText = "player " + playerNum.ToString();
    foreach (PlayerHand p in players)
    {
        <h4>Player @playerNum</h4>
        @if (!p.IsEmpty)
        {
            <Dropzone Name="@playerText" Class="row">
                @foreach (var card in p.Cards)
                {
                    <Draggable Tag='card.Rank.ToString() + "_" + card.Suit.ToString()'>
                        <Card PlayingCard="@card" />
                    </Draggable>
                }
            </Dropzone>
        }
        else
        {
            <button onclick="@DrawFullHand(p)">@playerText Draw</button>
        }
        playerNum++;
    }
    <h4>Discard pile</h4>
    @if (_pile.Cards.Count != 0)
    {
        <Dropzone Name="Discard" Class="row">
            @foreach (var card in _pile.Cards)
            {
                <Draggable Tag='card.Rank.ToString() + "_" + card.Suit.ToString()'>
                    <Card PlayingCard="@card" />
                </Draggable>
            }
        </Dropzone>
    }
}

@code {
    private Deck _deck;
    private List<PlayerHand> players = new List<PlayerHand>();
    private DiscardPile _pile;

    protected override async Task OnInitializedAsync()
    {
        _deck = new Deck();
        players.Add(new PlayerHand(1));
        players.Add(new PlayerHand(2));
        _pile = new DiscardPile();
    }

    protected async Task CreateDeck(Deck deck)
    {
        deck.CreateDeck();
        this.StateHasChanged();
    }

    protected async Task DrawFullHand(PlayerHand player)
    {
        if (_deck.HasMin)
        {
            player.FillHand(_deck);
        }
        else
        {

        }
        this.StateHasChanged();
    }

    protected async Task DrawCard(PlayerHand player)
    {
        if (!_deck.IsEmpty)
        {
            player.DrawCard(_deck);
        }
        else
        {

        }
        this.StateHasChanged();
    }

    protected async Task Discard(PlayerHand player, int index)
    {
        if (!_deck.IsEmpty)
        {
            player.Discard(_pile, index);
        }
        else
        {

        }
        this.StateHasChanged();
    }

    protected async Task<int> GetScore(PlayerHand player)
    {
        return player.Score;
    }
}